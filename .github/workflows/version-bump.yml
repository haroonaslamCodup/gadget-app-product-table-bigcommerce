name: Version Bump

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  bump-version:
    name: Bump Version
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine version bump type
        id: bump-type
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"

          if [[ "$COMMIT_MSG" =~ \[major\] ]]; then
            echo "type=major" >> $GITHUB_OUTPUT
            echo "📦 Bumping MAJOR version"
          elif [[ "$COMMIT_MSG" =~ \[minor\] ]]; then
            echo "type=minor" >> $GITHUB_OUTPUT
            echo "📦 Bumping MINOR version"
          else
            echo "type=patch" >> $GITHUB_OUTPUT
            echo "📦 Bumping PATCH version"
          fi

      - name: Bump version
        run: |
          BUMP_TYPE="${{ steps.bump-type.outputs.type }}"
          npm version $BUMP_TYPE -m "chore: bump version to %s [skip ci]"

      - name: Get new version
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "✅ New version: $VERSION"

      - name: Push changes
        run: |
          git push origin main --follow-tags

      - name: Create GitHub Release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const version = '${{ steps.version.outputs.version }}';
            const tag = `v${version}`;

            try {
              await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tag,
                name: `Release ${tag}`,
                body: `Automated release for version ${version}`,
                draft: false,
                prerelease: false
              });
              console.log(`✅ Created release ${tag}`);
            } catch (error) {
              console.log(`ℹ️ Release ${tag} may already exist`);
            }

      - name: Summary
        run: |
          echo "### 🎉 Version Bump Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **New Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Bump Type:** ${{ steps.bump-type.outputs.type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag:** v${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
